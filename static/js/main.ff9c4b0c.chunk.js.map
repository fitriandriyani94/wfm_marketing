{"version":3,"sources":["components/services/AuthenticationService.js","components/services/AuthenticatedRoute.jsx","components/views/LoginComponent.jsx","components/views/HeaderComponent.jsx","components/views/FooterComponent.jsx","components/views/WelcomeComponent.jsx","components/views/ErrorComponent.jsx","components/views/LogoutComponent.jsx","components/services/EmployeeDataService.js","components/views/ListEmployeeComponent.jsx","components/views/EmployeeComponent.jsx","components/services/ShiftTypeDataService.js","components/views/ListShiftTypeComponent.jsx","components/views/ShiftTypeComponent.jsx","components/services/AssignmentDataService.js","components/views/ListAssignmentComponent.jsx","components/views/AssignmentComponent.jsx","components/views/OptimizerComponent.jsx","components/views/WorkforceApp.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","sessionStorage","setItem","removeItem","getItem","user","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","LoginComponent","state","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","registerSuccessfulLogin","history","push","className","htmlFor","type","id","onChange","onClick","HeaderComponent","href","logout","FooterComponent","WelcomeComponent","match","params","variant","ErrorComponent","LogoutComponent","SERVICE_API","axios","get","delete","todo","put","post","ListEmployeeComponent","employees","message","refreshEmployees","deleteEmployeeClicked","updateEmployeeClicked","addEmployeeClicked","EmployeeDataService","retrieveAllEmployees","then","response","data","deleteEmployee","console","log","bordered","striped","hover","size","map","employee","key","idEmployee","nip","position","status","employeeSkill","employeeRole","EmployeeComponent","onSubmit","validate","retrieveEmployee","values","errors","length","createEmployee","updateEmployee","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","ListShiftTypeComponent","shiftTypes","refreshShiftTypes","deleteShiftTypeClicked","updateShiftTypeClicked","addShiftTypeClicked","ShiftTypeDataService","retrieveAllShiftTypes","code","deleteShiftType","shiftType","idShift","shiftTypeCode","startTime","endTime","ShiftTypeComponent","retrieveShiftType","createShiftType","updateShiftType","ListAssignmentComponent","assignments","refreshAssignments","deleteAssignmentClicked","updateAssignmentClicked","addAssignmentClicked","AssignmentDataService","retrieveAllAssignments","deleteAssignment","assignment","idAssignment","jobCode","jobName","activityDate","activityName","instance","classCount","hour","AssignmentComponent","retrieveAssignment","moment","format","createAssignment","updateAssignment","OptimizerComponent","items","group","title","start_time","end_time","add","groups","defaultTimeStart","defaultTimeEnd","WorkforceApp","basename","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff9c4b0c.chunk.js","sourcesContent":["class AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) {\n            return ''\n        } else {\n            return user\n        }\n    }\n}\n\nexport default new AuthenticationService()","import React, {Component} from 'react';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport {Route, Redirect} from 'react-router-dom';\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if(AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props}/>\n        } else {\n            return <Redirect to=\"/login\"/>\n        }\n    }\n}\n\nexport default AuthenticatedRoute","import React, {Component} from 'react';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport './LoginComponent.css';\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: 'fitri.andriyani',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.loginClicked = this.loginClicked.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]:event.target.value})\n    }\n\n    loginClicked() {\n        if(this.state.username === 'fitri.andriyani' && this.state.password === 'keepsecret') {\n            AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password);\n            this.props.history.push(`welcome/${this.state.username}`)\n        } else {\n            this.setState({showSuccessMessage:false})\n            this.setState({hasLoginFailed:true})\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                </div>\n                <div className=\"col-md-4\">\n                    {this.state.hasLoginFailed && <div className=\"alert alert-primary\">Invalid Credentials</div>}\n                    <div className=\"container-gray\">\n                        <div className=\"col login-sec\">\n                            <h2 className=\"text-center\">Sign In</h2>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"usr\">Username:</label>\n                                    <input type=\"text\" id=\"usr\" className=\"form-control\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"pwd\">Password:</label>\n                                    <input type=\"password\" id=\"pwd\" className=\"form-control\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                                    <br/>\n                                    <button className=\"btn btn-primary\" onClick={this.loginClicked}>\n                                        Submit\n                                    </button>\n                                </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport AuthenticationService from '../services/AuthenticationService.js';\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n\n        return(\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://raharja.ac.id/\" className=\"navbar-brand\">Workforce Management</a></div>\n                    <ul className=\"navbar-nav\"> \n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/welcome/fitri.andriani\">Home</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/employees\">Employee</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/shift-types\">Shift Type</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/assignments\">Assignment</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/optimizer\">Optimizer</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent","import React, {Component} from 'react';\n\nclass FooterComponent extends Component {\n    render() {\n        return(\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Right Reserved 2019 @Workforce Management Team</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\n\nclass WelcomeComponent extends Component {\n    render() {\n        return(\n            <>\n                <Jumbotron>\n                    {<h1>Welcome {this.props.match.params.name}</h1>}\n                    <p>\n                        This is a workforce management application, You can manage your employees <Link to=\"/employees\">here</Link>.\n                    </p>\n                    <p>\n                        You can manage assignment for your employees <Link to=\"/assignments\">here</Link>.\n                    </p>\n                    <p>\n                        <Button variant=\"primary\">Learn more</Button>\n                    </p>\n                </Jumbotron>\n            </>\n        )\n    }\n}\n\nexport default WelcomeComponent","import React from 'react';\n\nfunction ErrorComponent() {\n    return <div>An errror occured!</div>\n}\n\nexport default ErrorComponent","import React, {Component} from 'react';\n\nclass LogoutComponent extends Component {\n    render() {\n        return(\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank Your for Using Our Application\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforceproject.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/employees`;\n\nclass EmployeeDataService {\n    retrieveAllEmployees(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteEmployee(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveEmployee(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateEmployee(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createEmployee(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new EmployeeDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\n\nclass ListEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employees: [],\n            message:\"\"\n        }\n        this.refreshEmployees = this.refreshEmployees.bind(this);\n        this.deleteEmployeeClicked = this.deleteEmployeeClicked.bind(this);\n        this.updateEmployeeClicked = this.updateEmployeeClicked.bind(this);\n        this.addEmployeeClicked = this.addEmployeeClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshEmployees();\n    }\n\n    refreshEmployees() {\n        EmployeeDataService.retrieveAllEmployees(\"name\")\n            .then(\n                response => {\n                    this.setState({employees: response.data})\n                }\n            )\n    }\n\n    deleteEmployeeClicked(id, name) {\n        EmployeeDataService.deleteEmployee(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of employee ${name} Successful`})\n                    this.refreshEmployees()\n                }\n            )\n    }\n\n    updateEmployeeClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/employee/${id}`)\n    }\n\n    addEmployeeClicked() {\n        this.props.history.push('/employee/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Employee</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>NIP</th>\n                                <th>Position</th>\n                                <th>Status</th>\n                                <th>Skill</th>\n                                <th>Role</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.employees.map (\n                                    employee => \n                                    <tr key={employee.idEmployee}>\n                                        <td>{employee.name}</td>\n                                        <td>{employee.nip}</td>\n                                        <td>{employee.position}</td>\n                                        <td>{employee.status}</td>\n                                        <td>{employee.employeeSkill}</td>\n                                        <td>{employee.employeeRole}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateEmployeeClicked(employee.idEmployee)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteEmployeeClicked(employee.idEmployee, employee.name)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addEmployeeClicked()}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListEmployeeComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\n\nclass EmployeeComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            name: '',\n            nip: '',\n            position: '',\n            status: '',\n            employeeSkill: '',\n            employeeRole: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        EmployeeDataService.retrieveEmployee(this.state.id)\n        .then(response => this.setState({\n            name:response.data.name,\n            nip:response.data.nip,\n            position:response.data.position,\n            status:response.data.status,\n            employeeSkill:response.data.employeeSkill,\n            employeeRole:response.data.employeeRole\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.name) {\n            errors.name = 'Enter an employee name'           \n        } else if(values.name.length < 5) {\n            errors.name = 'Enter at least 5 characters for employee name'\n        }\n\n        if(!values.nip) {\n            errors.nip = 'Enter a NIP'           \n        } else if(values.nip.length < 5) {\n            errors.nip = 'Enter at least 5 characters for NIP'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            EmployeeDataService.createEmployee({\n                name:values.name,\n                nip:values.nip,\n                position:values.position,\n                status:values.status,\n                employeeSkill:values.employeeSkill,\n                employeeRole:values.employeeRole\n            }).then(() => this.props.history.push('/employees'))\n        } else {\n            console.log(\"Update\")\n            EmployeeDataService.updateEmployee(this.state.id, {\n                name:values.name,\n                nip:values.nip,\n                position:values.position,\n                status:values.status,\n                employeeSkill:values.employeeSkill,\n                employeeRole:values.employeeRole\n            }).then(() => this.props.history.push('/employees'))\n        }\n    }\n\n    render() {\n        let {name, nip, position, status, employeeSkill, employeeRole} = this.state\n\n        return (\n            <div>\n                <h1>Employee</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{name,nip,position,status,employeeSkill, employeeRole}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"name\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"nip\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"name\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>NIP</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"nip\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Position</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"position\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Status</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"status\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Skill</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"employeeSkill\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Role</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"employeeRole\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default EmployeeComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforceproject.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/shiftTypes`;\n\nclass ShiftTypeDataService {\n    retrieveAllShiftTypes(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteShiftType(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveShiftType(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateShiftType(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createShiftType(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new ShiftTypeDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport ShiftTypeDataService from '../services/ShiftTypeDataService.js';\n\nclass ListShiftTypeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            shiftTypes: [],\n            message:\"\"\n        }\n        this.refreshShiftTypes = this.refreshShiftTypes.bind(this);\n        this.deleteShiftTypeClicked = this.deleteShiftTypeClicked.bind(this);\n        this.updateShiftTypeClicked = this.updateShiftTypeClicked.bind(this);\n        this.addShiftTypeClicked = this.addShiftTypeClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshShiftTypes();\n    }\n\n    refreshShiftTypes() {\n        ShiftTypeDataService.retrieveAllShiftTypes(\"name\")\n            .then(\n                response => {\n                    this.setState({shiftTypes: response.data})\n                }\n            )\n    }\n\n    deleteShiftTypeClicked(id, code) {\n        ShiftTypeDataService.deleteShiftType(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of shift type ${code} Successful`})\n                    this.refreshShiftTypes()\n                }\n            )\n    }\n\n    updateShiftTypeClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/shift-type/${id}`)\n    }\n\n    addShiftTypeClicked() {\n        this.props.history.push('/shift-type/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Shift Type</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Shift Type Code</th>\n                                <th>Start Time</th>\n                                <th>End Time</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.shiftTypes.map (\n                                    shiftType => \n                                    <tr key={shiftType.idShift}>\n                                        <td>{shiftType.shiftTypeCode}</td>\n                                        <td>{shiftType.startTime}</td>\n                                        <td>{shiftType.endTime}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateShiftTypeClicked(shiftType.idShift)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteShiftTypeClicked(shiftType.idShift, shiftType.shiftTypeCode)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addShiftTypeClicked()}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListShiftTypeComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport ShiftTypeDataService from '../services/ShiftTypeDataService.js';\n\nclass ShiftTypeComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            shiftTypeCode: '',\n            startTime: '',\n            endTime: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        ShiftTypeDataService.retrieveShiftType(this.state.id)\n        .then(response => this.setState({\n            shiftTypeCode:response.data.shiftTypeCode,\n            startTime:response.data.startTime,\n            endTime:response.data.endTime\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.shiftTypeCode) {\n            errors.shiftTypeCode = 'Enter a shift type code'           \n        } else if(values.shiftTypeCode.length < 1) {\n            errors.shiftTypeCode = 'Enter at least 1 characters for shift type code'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            ShiftTypeDataService.createShiftType({\n                shiftTypeCode:values.shiftTypeCode,\n                startTime:values.startTime,\n                endTime:values.endTime\n            }).then(() => this.props.history.push('/shift-types'))\n        } else {\n            console.log(\"Update\")\n            ShiftTypeDataService.updateShiftType(this.state.id, {\n                shiftTypeCode:values.shiftTypeCode,\n                startTime:values.startTime,\n                endTime:values.endTime\n            }).then(() => this.props.history.push('/shift-types'))\n        }\n    }\n\n    render() {\n        let {shiftTypeCode, startTime, endTime} = this.state\n\n        return (\n            <div>\n                <h1>Shift Type</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{shiftTypeCode,startTime,endTime}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"shiftTypeCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <fieldset className=\"form-group\">\n                                                <label>Shift Type Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"shiftTypeCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Start Time</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"startTime\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>End Time</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"endTime\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ShiftTypeComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforceproject.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/assignments`;\n\nclass AssignmentDataService {\n    retrieveAllAssignments(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteAssignment(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveAssignment(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateAssignment(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createAssignment(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new AssignmentDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport AssignmentDataService from '../services/AssignmentDataService.js';\n\nclass ListAssignmentComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            assignments: [],\n            message:\"\"\n        }\n        this.refreshAssignments = this.refreshAssignments.bind(this);\n        this.deleteAssignmentClicked = this.deleteAssignmentClicked.bind(this);\n        this.updateAssignmentClicked = this.updateAssignmentClicked.bind(this);\n        this.addAssignmentClicked = this.addAssignmentClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshAssignments();\n    }\n\n    refreshAssignments() {\n        AssignmentDataService.retrieveAllAssignments(\"name\")\n            .then(\n                response => {\n                    this.setState({assignments: response.data})\n                }\n            )\n    }\n\n    deleteAssignmentClicked(id, name) {\n        AssignmentDataService.deleteAssignment(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of assignment ${name} Successful`})\n                    this.refreshAssignments()\n                }\n            )\n    }\n\n    updateAssignmentClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/assignment/${id}`)\n    }\n\n    addAssignmentClicked() {\n        this.props.history.push('/assignment/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Assignment</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Job Code</th>\n                                <th>Job Name</th>\n                                <th>Activity Date</th>\n                                <th>Activity Name</th>\n                                <th>Instance</th>\n                                <th>Class Count</th>\n                                <th>Hour</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.assignments.map (\n                                    assignment => \n                                    <tr key={assignment.idAssignment}>\n                                        <td>{assignment.jobCode}</td>\n                                        <td>{assignment.jobName}</td>\n                                        <td>{assignment.activityDate}</td>\n                                        <td>{assignment.activityName}</td>\n                                        <td>{assignment.instance}</td>\n                                        <td>{assignment.classCount}</td>\n                                        <td>{assignment.hour}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateAssignmentClicked(assignment.idAssignment)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteAssignmentClicked(assignment.idAssignment, assignment.jobCode)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addAssignmentClicked()}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListAssignmentComponent","import React, {Component} from 'react';\nimport moment from 'moment';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport AssignmentDataService from '../services/AssignmentDataService.js';\n\nclass AssignmentComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            jobCode: '',\n            jobName: '',\n            activityDate: '',\n            activityName: '',\n            instance: '',\n            classCount: '',\n            hour: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        AssignmentDataService.retrieveAssignment(this.state.id)\n        .then(response => this.setState({\n            jobCode:response.data.jobCode,\n            jobName:response.data.jobName,\n            activityDate:moment(response.data.activityDate).format('YYYY-MM-DD'),\n            activityName:response.data.activityName,\n            instance:response.data.instance,\n            classCount:response.data.classCount,\n            hour:response.data.hour\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.jobCode) {\n            errors.jobCode = 'Enter a job code'           \n        } else if(values.jobCode.length < 5) {\n            errors.jobCode = 'Enter at least 5 characters for job code'\n        }\n\n        if(!values.jobName) {\n            errors.jobName = 'Enter a job name'           \n        } else if(values.jobName.length < 5) {\n            errors.jobName = 'Enter at least 5 characters for job name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            AssignmentDataService.createAssignment({\n                jobCode:values.jobCode,\n                jobName:values.jobName,\n                activityDate:values.activityDate,\n                activityName:values.activityName,\n                instance:values.instance,\n                classCount:values.classCount,\n                hour:values.hour\n            }).then(() => this.props.history.push('/assignments'))\n        } else {\n            console.log(\"Update\")\n            AssignmentDataService.updateAssignment(this.state.id, {\n                jobCode:values.jobCode,\n                jobName:values.jobName,\n                activityDate:values.activityDate,\n                activityName:values.activityName,\n                instance:values.instance,\n                classCount:values.classCount,\n                hour:values.hour\n            }).then(() => this.props.history.push('/assignments'))\n        }\n    }\n\n    render() {\n        let {jobCode, jobName, activityDate, activityName, instance, classCount, hour} = this.state\n\n        return (\n            <div>\n                <h1>Assignment</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{jobCode,jobName,activityDate,activityName,instance,classCount,hour}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"jobCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"jobName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Job Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"jobCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Job Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"jobName\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Activity Date</label>\n                                                <Field className=\"form-control\" type=\"date\" name=\"activityDate\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Activity Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"activityName\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Instance</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"instance\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Class Count</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"classCount\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Hour</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"hour\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AssignmentComponent","import React, { Component } from \"react\";\nimport Timeline from 'react-calendar-timeline';\nimport 'react-calendar-timeline/lib/Timeline.css';\nimport moment from 'moment'\n\nclass OptimizerComponent extends Component {\n    render() {\n        const groups = [\n            {id: 1, title: 'Employee 1'}, \n            {id: 2, title: 'Employee 2'},\n            {id: 3, title: 'Employee 3'},\n            {id: 4, title: 'Employee 4'}\n        ]\n\n        const items = [\n            {\n              id: 1,\n              group: 1,\n              title: 'Stand By',\n              start_time: moment(),\n              end_time: moment().add(1, 'hour')\n            },\n            {\n              id: 2,\n              group: 2,\n              title: 'Stand By',\n              start_time: moment().add(-0.5, 'hour'),\n              end_time: moment().add(0.5, 'hour')\n            },\n            {\n              id: 3,\n              group: 1,\n              title: 'Promosi',\n              start_time: moment().add(2, 'hour'),\n              end_time: moment().add(3, 'hour')\n            },\n            {\n                id: 4,\n                group: 3,\n                title: 'Follow Up',\n                start_time: moment().add(2, 'hour'),\n                end_time: moment().add(3, 'hour')\n            },\n            {\n                id: 5,\n                group: 4,\n                title: 'Follow Up',\n                start_time: moment().add(2, 'hour'),\n                end_time: moment().add(3, 'hour')\n            }\n          ]\n\n        return (\n            <div className=\"container\">\n                <h3>Employee Scheduling</h3>\n                <Timeline\n                    groups={groups}\n                    items={items}\n                    defaultTimeStart={moment().add(-12, 'hour')}\n                    defaultTimeEnd={moment().add(12, 'hour')}\n                />\n            </div>\n        )\n    }\n}\n\nexport default OptimizerComponent","import React, {Component} from 'react';\nimport {HashRouter, Router, Route, Switch} from 'react-router-dom';\nimport AuthenticatedRoute from '../services/AuthenticatedRoute.jsx';\nimport LoginComponent from '../views/LoginComponent.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\nimport FooterComponent from '../views/FooterComponent.jsx';\nimport WelcomeComponent from '../views/WelcomeComponent.jsx';\nimport ErrorComponent from '../views/ErrorComponent.jsx';\nimport LogoutComponent from '../views/LogoutComponent.jsx';\nimport ListEmployeeComponent from '../views/ListEmployeeComponent.jsx';\nimport EmployeeComponent from '../views/EmployeeComponent.jsx';\nimport ListShiftTypeComponent from '../views/ListShiftTypeComponent.jsx';\nimport ShiftTypeComponent from '../views/ShiftTypeComponent.jsx';\nimport ListAssignmentComponent from '../views/ListAssignmentComponent.jsx';\nimport AssignmentComponent from '../views/AssignmentComponent.jsx';\nimport OptimizerComponent from '../views/OptimizerComponent.jsx';\n\nclass WorkforceApp extends Component {\n    render() {\n        return(\n            <div className=\"TodoApp\">\n                <HashRouter basename=\"/\">\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/employees\" component={ListEmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/employee/:id\" component={EmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/shift-types\" component={ListShiftTypeComponent}/>\n                            <AuthenticatedRoute path=\"/shift-type/:id\" component={ShiftTypeComponent}/>\n                            <AuthenticatedRoute path=\"/assignments\" component={ListAssignmentComponent}/>\n                            <AuthenticatedRoute path=\"/assignment/:id\" component={AssignmentComponent}/>\n                            <AuthenticatedRoute path=\"/optimizer\" component={OptimizerComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            <Route path=\"\" component={ErrorComponent}/>\n                        </Switch>\n                        <FooterComponent/>\n                    </>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\nexport default WorkforceApp;","import React from 'react';\nimport WorkforceApp from '../src/components/views/WorkforceApp.jsx';\nimport './App.css';\nimport './bootstrap.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorkforceApp/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}